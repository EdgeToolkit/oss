---

# 1. reset all configured hostname
# 2. generate gitlab config for each hostname
# 3. deploy configs
- name: Create local workbench folders for {{ansible_ssh_host}}
  file:
    path: /oss/{{item}}
    state: directory
    mode: '0755'
  with_items:
    - .tmp
    - .tmp/gitlab-runner
    - ".tmp/gitlab-runner/{{ansible_ssh_host}}"
    - ".tmp/gitlab-runner/{{ansible_ssh_host}}/.workbench"
  delegate_to: localhost

- name: reset config in gitlab
  shell: |
    /oss/.toolkit/bin/gitlab-ci runner.reset --url {{GITLAB_URL}} \
      --token {{GITLAB_PRIVATE_TOKEN}} \
      --dir /oss/.toolkit/var/gitlab-runner \
      --hostname {{ansible_ssh_host}}
  delegate_to: localhost

- name: config in gitlab
  shell: |
    /oss/.toolkit/bin/gitlab-ci runner.config --url {{GITLAB_URL}} \
      --token {{GITLAB_PRIVATE_TOKEN}} \
      --dir /oss/.toolkit/var/gitlab-runner \
      --hostname {{ansible_ssh_host}} \
      --builder {{GITLAB_RUNNER_BUILDER}}  \
      --tester {{GITLAB_RUNNER_TESTER}} \
      --deployer {{GITLAB_RUNNER_DEPLOYER}} \
      --trigger {{GITLAB_RUNNER_CI_GENERATOR}}   \
      --platform {{ansible_system}}      \
      --arch {{ansible_architecture}} \
      --workbench workbench=oss/{{OSS_VERSION}}
  delegate_to: localhost

- name: generate runner config and workbench files
  shell: |
    /oss/.toolkit/bin/gitlab-ci runner.make --url {{GITLAB_URL}} \
      --token {{GITLAB_PRIVATE_TOKEN}} \
      --dir /oss/.toolkit/var/gitlab-runner \
      --hostname {{ansible_ssh_host}} \
      --out /oss/.tmp/gitlab-runner
  delegate_to: localhost

- name: deploy gitlab-runner workbench to {{ansible_ssh_host}}
  copy:
    src: "/oss/.tmp/gitlab-runner/{{ansible_ssh_host}}/.workbench"
    dest: "/home/{{ansible_ssh_host}}/.epm"


# .workbench/oss/{{kind}}/{{version}}/{{runner.id}}